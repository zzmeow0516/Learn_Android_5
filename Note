一. ArrayAdapter
ArrayAdapter是一种适配器，用于将数组或列表（List）数据绑定到ListView或Spinner等视图组件
可以定义自己的XML布局文件来控制数据的显示方式

常用构造方法：
ArrayAdapter(Context context, int resource, List<T> objects)
ArrayAdapter(Context context, int resource, int textViewResourceId, List<T> objects)

构造方法中的参数解释：
context：上下文，通常指当前的Activity或应用环境。
resource：布局资源ID，指定了  每个列表项  使用的布局。
textViewResourceId：（可选）如果布局中包含TextView，这个参数用来指定TextView的ID。
objects：数据源，可以是数组或者List集合

在activity中的示例代码步骤：
1.准备集合数据
    private val fruitlist = ArrayList<Frutis>()             //这里的Fruits类是我们自己新建的，包含 name 和 fruitImageId 两个数据
2.获取listview的实例     val listview: ListView = findViewById(R.id.listview1)
3.创建ArrayAdapter      val adapter = FruitAdapter(this, R.layout.fruit_item, fruitList)      //这里其实已经用到了自定义布局和自定义adapter，在下面进行详细解释
4.将adapter传递给listview   listview.adapter = adapter

使用  自定义布局 的情况下展示每一个列表项：
1. 编写自定义xml布局，我们这里写的是fruit_item.xml，包括一个ImageView和一个TextView

使用 自定义ArrayAdapter ：
1. 创建一个新的adapter: class fruitadapter(...) : ArrayAdapter(...) { ... }
2. override getView()
    2.1 使用LayoutInflater为子项加载布局
    2.2 获取实例
    2.3 写入元素

----------------------------------------
二. findViewById:
在需要调用findViewById来获取控件的时候，
1. 如果是在 Activity 内，可以直接调用findViewById，因为Activity的setContextView已经加载过布局了，我们通过findViewById需要找的控件肯定是在这个 加载过的布局当中
所以可以直接调用（其实是调用ACtivity类的findViewById方法）
2. 如果不是在Activity内，而是在一个Fragment / 自定义ViewGroup / 特定View 中，我们需要通过一个具体的view实例来调用findViewById，
在本例中，写的是
view = LayoutInflater.from(context).inflate(resourceId, parent, false)
val fruitImage: ImageView = view.findViewById(R.id.fruitImage)


-------------------------------------------
三. 在Kotlin中，当构造器参数前使用val或var，这些参数会变成类的属性，可以像访问其他属性一样访问它们
inner class ViewHolder(val fruitImage: ImageView, val fruitName: TextView)
val viewholder: ViewHolder
val fruitImage: ImageView = view.findViewById(R.id.fruitImage)
val fruitName: TextView = view.findViewById(R.id.fruitName)
viewholder = ViewHolder(fruitImage, fruitName)

viewholder.fruitImage.setImageResource(fruit.fruitImageId)
viewholder.fruitName.text = fruit.name
